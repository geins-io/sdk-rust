/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PriceListPeriodModelsPeriodReadPeriodPriceListPrice : A price for a product on a specific price list.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PriceListPeriodModelsPeriodReadPeriodPriceListPrice {
    /// The id of the product that this price applies to.
    #[serde(rename = "ProductId", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<i32>,
    /// The id of the price list that this price is associated with.
    #[serde(rename = "PriceListId", skip_serializing_if = "Option::is_none")]
    pub price_list_id: Option<i32>,
    /// The name of the price list that this price is associated with.
    #[serde(rename = "PriceListName", skip_serializing_if = "Option::is_none")]
    pub price_list_name: Option<String>,
    /// The price, inc VAT, in the currency of the associated price list.
    #[serde(rename = "PriceIncVat", skip_serializing_if = "Option::is_none")]
    pub price_inc_vat: Option<f64>,
    /// The price, ex VAT, in the currency of the associated price list.
    #[serde(rename = "PriceExVat", skip_serializing_if = "Option::is_none")]
    pub price_ex_vat: Option<f64>,
    /// The Vat Rate
    #[serde(rename = "VatRate", skip_serializing_if = "Option::is_none")]
    pub vat_rate: Option<f64>,
    /// The 2-letter ISO country code for this price.
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The 3-letter ISO 4217 currency code for this price.
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Staggered count for this price. Defaults to 1.
    #[serde(rename = "StaggeredCount", skip_serializing_if = "Option::is_none")]
    pub staggered_count: Option<i32>,
    /// The date the price is valid from.
    #[serde(rename = "ValidFrom", skip_serializing_if = "Option::is_none")]
    pub valid_from: Option<String>,
    /// The date the price is valid to.
    #[serde(rename = "ValidTo", skip_serializing_if = "Option::is_none")]
    pub valid_to: Option<String>,
}

impl PriceListPeriodModelsPeriodReadPeriodPriceListPrice {
    /// A price for a product on a specific price list.
    pub fn new() -> PriceListPeriodModelsPeriodReadPeriodPriceListPrice {
        PriceListPeriodModelsPeriodReadPeriodPriceListPrice {
            product_id: None,
            price_list_id: None,
            price_list_name: None,
            price_inc_vat: None,
            price_ex_vat: None,
            vat_rate: None,
            country: None,
            currency: None,
            staggered_count: None,
            valid_from: None,
            valid_to: None,
        }
    }
}


