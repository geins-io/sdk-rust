/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserPeriodModelsPeriodWritePeriodUserProfile {
    #[serde(rename = "UserId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    #[serde(rename = "SiteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "Password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "FirstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "LastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "PhoneNr", skip_serializing_if = "Option::is_none")]
    pub phone_nr: Option<String>,
    #[serde(rename = "MobilePhoneNr", skip_serializing_if = "Option::is_none")]
    pub mobile_phone_nr: Option<String>,
    #[serde(rename = "Company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,
    #[serde(rename = "UserTypeId", skip_serializing_if = "Option::is_none")]
    pub user_type_id: Option<i32>,
    #[serde(rename = "Address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "Address2", skip_serializing_if = "Option::is_none")]
    pub address2: Option<String>,
    #[serde(rename = "Address3", skip_serializing_if = "Option::is_none")]
    pub address3: Option<String>,
    #[serde(rename = "DoorCode", skip_serializing_if = "Option::is_none")]
    pub door_code: Option<String>,
    #[serde(rename = "PersonalId", skip_serializing_if = "Option::is_none")]
    pub personal_id: Option<String>,
    #[serde(rename = "Birthyear", skip_serializing_if = "Option::is_none")]
    pub birthyear: Option<String>,
    #[serde(rename = "Zip", skip_serializing_if = "Option::is_none")]
    pub zip: Option<String>,
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "CareOf", skip_serializing_if = "Option::is_none")]
    pub care_of: Option<String>,
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "CountryId", skip_serializing_if = "Option::is_none")]
    pub country_id: Option<i32>,
    #[serde(rename = "Gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<bool>,
    /// Decides whether the user should be subscribed to the newsletter.
    #[serde(rename = "Newsletter", skip_serializing_if = "Option::is_none")]
    pub newsletter: Option<bool>,
    /// Set this to true if the management platform will not be the main way of authentication.
    #[serde(rename = "HasExternalAuth", skip_serializing_if = "Option::is_none")]
    pub has_external_auth: Option<bool>,
}

impl UserPeriodModelsPeriodWritePeriodUserProfile {
    pub fn new() -> UserPeriodModelsPeriodWritePeriodUserProfile {
        UserPeriodModelsPeriodWritePeriodUserProfile {
            user_id: None,
            site_id: None,
            email: None,
            password: None,
            first_name: None,
            last_name: None,
            phone_nr: None,
            mobile_phone_nr: None,
            company: None,
            user_type_id: None,
            address: None,
            address2: None,
            address3: None,
            door_code: None,
            personal_id: None,
            birthyear: None,
            zip: None,
            city: None,
            care_of: None,
            country: None,
            country_id: None,
            gender: None,
            newsletter: None,
            has_external_auth: None,
        }
    }
}


