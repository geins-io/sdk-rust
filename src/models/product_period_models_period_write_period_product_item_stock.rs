/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ProductPeriodModelsPeriodWritePeriodProductItemStock : A stock value for a product item



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProductPeriodModelsPeriodWritePeriodProductItemStock {
    /// A value to uniquely identity a single product item.  <remarks>This value can represent different fields, depending on configuration.</remarks>
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The stock value.
    #[serde(rename = "Stock", skip_serializing_if = "Option::is_none")]
    pub stock: Option<i32>,
    /// The sellable stock value.  <remarks>This value is read only.</remarks>
    #[serde(rename = "StockSellable", skip_serializing_if = "Option::is_none")]
    pub stock_sellable: Option<i32>,
    /// The type of stock to be updated. See {Product.Models.ProductItemStockType}
    #[serde(rename = "StockType", skip_serializing_if = "Option::is_none")]
    pub stock_type: Option<StockType>,
}

impl ProductPeriodModelsPeriodWritePeriodProductItemStock {
    /// A stock value for a product item
    pub fn new() -> ProductPeriodModelsPeriodWritePeriodProductItemStock {
        ProductPeriodModelsPeriodWritePeriodProductItemStock {
            id: None,
            stock: None,
            stock_sellable: None,
            stock_type: None,
        }
    }
}

/// The type of stock to be updated. See {Product.Models.ProductItemStockType}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StockType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for StockType {
    fn default() -> StockType {
        Self::Variant0
    }
}

