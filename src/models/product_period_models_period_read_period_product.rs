/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ProductPeriodModelsPeriodReadPeriodProduct : A product.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProductPeriodModelsPeriodReadPeriodProduct {
    /// The unique identifier for the product.
    #[serde(rename = "ProductId", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<i32>,
    /// The article number of the product.
    #[serde(rename = "ArticleNumber", skip_serializing_if = "Option::is_none")]
    pub article_number: Option<String>,
    /// The localized names of the product.
    #[serde(rename = "Names", skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<crate::models::SharedPeriodModelsPeriodLocalizableContent>>,
    /// The date the product was created.
    #[serde(rename = "DateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date the product was last updated.
    #[serde(rename = "DateUpdated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The current state of the product.
    #[serde(rename = "Active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// The purchase price in the currency defined in {Product.Models.Read.Product.PurchasePriceCurrency}.
    #[serde(rename = "PurchasePrice", skip_serializing_if = "Option::is_none")]
    pub purchase_price: Option<f64>,
    /// The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Read.Product.PurchasePrice}.
    #[serde(rename = "PurchasePriceCurrency", skip_serializing_if = "Option::is_none")]
    pub purchase_price_currency: Option<String>,
    /// Localized short texts for the product.
    #[serde(rename = "ShortTexts", skip_serializing_if = "Option::is_none")]
    pub short_texts: Option<Vec<crate::models::SharedPeriodModelsPeriodLocalizableContent>>,
    /// Localized long texts for the product.
    #[serde(rename = "LongTexts", skip_serializing_if = "Option::is_none")]
    pub long_texts: Option<Vec<crate::models::SharedPeriodModelsPeriodLocalizableContent>>,
    /// Localized tech texts for the product.
    #[serde(rename = "TechTexts", skip_serializing_if = "Option::is_none")]
    pub tech_texts: Option<Vec<crate::models::SharedPeriodModelsPeriodLocalizableContent>>,
    /// The items belonging to the product.
    #[serde(rename = "Items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<crate::models::ProductPeriodModelsPeriodReadPeriodProductItem>>,
    /// The current prices of the product.
    #[serde(rename = "Prices", skip_serializing_if = "Option::is_none")]
    pub prices: Option<Vec<crate::models::PriceListPeriodModelsPeriodReadPeriodPriceListPrice>>,
    /// The categories the product belongs to.
    #[serde(rename = "Categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<crate::models::CategoryPeriodModelsPeriodReadPeriodCategory>>,
    /// The images for the product
    #[serde(rename = "Images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<crate::models::ProductPeriodModelsPeriodReadPeriodImage>>,
    /// The brand id of the product.
    #[serde(rename = "BrandId", skip_serializing_if = "Option::is_none")]
    pub brand_id: Option<i32>,
    /// The brand name of the product.
    #[serde(rename = "BrandName", skip_serializing_if = "Option::is_none")]
    pub brand_name: Option<String>,
    /// The supplier id of the product.
    #[serde(rename = "SupplierId", skip_serializing_if = "Option::is_none")]
    pub supplier_id: Option<i32>,
    /// The supplier name of the product.
    #[serde(rename = "SupplierName", skip_serializing_if = "Option::is_none")]
    pub supplier_name: Option<String>,
    /// The parameter values associated with the product.
    #[serde(rename = "ParameterValues", skip_serializing_if = "Option::is_none")]
    pub parameter_values: Option<Vec<crate::models::ProductParameterPeriodModelsPeriodReadPeriodProductParameterValue>>,
    /// The variants for this product.
    #[serde(rename = "Variants", skip_serializing_if = "Option::is_none")]
    pub variants: Option<Vec<crate::models::VariantPeriodModelsPeriodReadPeriodVariant>>,
    /// The markets for this product
    #[serde(rename = "Markets", skip_serializing_if = "Option::is_none")]
    pub markets: Option<Vec<crate::models::MarketPeriodModelsPeriodMarket>>,
    /// The vat percent for this product. Eg) 0.25 meaning 25% VAT.
    #[serde(rename = "Vat", skip_serializing_if = "Option::is_none")]
    pub vat: Option<f64>,
    /// The filename of this products primary image.
    #[serde(rename = "PrimaryImage", skip_serializing_if = "Option::is_none")]
    pub primary_image: Option<String>,
    /// ID of freight class
    #[serde(rename = "FreightClassId", skip_serializing_if = "Option::is_none")]
    pub freight_class_id: Option<i32>,
    /// Intrastat code of the product
    #[serde(rename = "IntrastatCode", skip_serializing_if = "Option::is_none")]
    pub intrastat_code: Option<String>,
    /// Country of orgin of product
    #[serde(rename = "CountryOfOrigin", skip_serializing_if = "Option::is_none")]
    pub country_of_origin: Option<String>,
    /// ID of Variant Group to which the product is associated
    #[serde(rename = "VariantGroupId", skip_serializing_if = "Option::is_none")]
    pub variant_group_id: Option<i32>,
    /// ID of Vat
    #[serde(rename = "VatId", skip_serializing_if = "Option::is_none")]
    pub vat_id: Option<i32>,
    /// External Id of the product.
    #[serde(rename = "ExternalId", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    /// Activation date for the product.
    #[serde(rename = "ActivationDate", skip_serializing_if = "Option::is_none")]
    pub activation_date: Option<String>,
    /// The feeds the product is a member of
    #[serde(rename = "Feeds", skip_serializing_if = "Option::is_none")]
    pub feeds: Option<Vec<crate::models::ProductPeriodModelsPeriodReadPeriodFeedMembership>>,
    /// All canonical urls for the product
    #[serde(rename = "Urls", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Vec<crate::models::ProductPeriodModelsPeriodReadPeriodProductUrl>>,
    /// The main category id for the product.
    #[serde(rename = "MainCategoryId", skip_serializing_if = "Option::is_none")]
    pub main_category_id: Option<i32>,
    /// The related products for the product.
    #[serde(rename = "RelatedProducts", skip_serializing_if = "Option::is_none")]
    pub related_products: Option<Vec<crate::models::ProductPeriodModelsPeriodReadPeriodRelatedProduct>>,
}

impl ProductPeriodModelsPeriodReadPeriodProduct {
    /// A product.
    pub fn new() -> ProductPeriodModelsPeriodReadPeriodProduct {
        ProductPeriodModelsPeriodReadPeriodProduct {
            product_id: None,
            article_number: None,
            names: None,
            date_created: None,
            date_updated: None,
            active: None,
            purchase_price: None,
            purchase_price_currency: None,
            short_texts: None,
            long_texts: None,
            tech_texts: None,
            items: None,
            prices: None,
            categories: None,
            images: None,
            brand_id: None,
            brand_name: None,
            supplier_id: None,
            supplier_name: None,
            parameter_values: None,
            variants: None,
            markets: None,
            vat: None,
            primary_image: None,
            freight_class_id: None,
            intrastat_code: None,
            country_of_origin: None,
            variant_group_id: None,
            vat_id: None,
            external_id: None,
            activation_date: None,
            feeds: None,
            urls: None,
            main_category_id: None,
            related_products: None,
        }
    }
}


