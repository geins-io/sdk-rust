/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OrderPeriodCheckoutOrder {
    #[serde(rename = "OrderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    #[serde(rename = "ExternalOrderId", skip_serializing_if = "Option::is_none")]
    pub external_order_id: Option<String>,
    #[serde(rename = "CartId", skip_serializing_if = "Option::is_none")]
    pub cart_id: Option<String>,
    #[serde(rename = "SessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    #[serde(rename = "SiteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "IpAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(rename = "Message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "InternalMessage", skip_serializing_if = "Option::is_none")]
    pub internal_message: Option<String>,
    #[serde(rename = "Locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    #[serde(rename = "Rows", skip_serializing_if = "Option::is_none")]
    pub rows: Option<Vec<crate::models::OrderPeriodCheckoutOrderRow>>,
    #[serde(rename = "CampaignId", skip_serializing_if = "Option::is_none")]
    pub campaign_id: Option<i32>,
    #[serde(rename = "CampaignCode", skip_serializing_if = "Option::is_none")]
    pub campaign_code: Option<String>,
    #[serde(rename = "CampaignName", skip_serializing_if = "Option::is_none")]
    pub campaign_name: Option<String>,
    #[serde(rename = "CampaignIds", skip_serializing_if = "Option::is_none")]
    pub campaign_ids: Option<Vec<String>>,
    #[serde(rename = "CampaignNames", skip_serializing_if = "Option::is_none")]
    pub campaign_names: Option<Vec<String>>,
    #[serde(rename = "CustomerId", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<i32>,
    #[serde(rename = "CustomerTypeId", skip_serializing_if = "Option::is_none")]
    pub customer_type_id: Option<i32>,
    #[serde(rename = "Gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    #[serde(rename = "DateOfBirth", skip_serializing_if = "Option::is_none")]
    pub date_of_birth: Option<String>,
    #[serde(rename = "PersonalId", skip_serializing_if = "Option::is_none")]
    pub personal_id: Option<String>,
    #[serde(rename = "UserAgent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
    #[serde(rename = "MetaData", skip_serializing_if = "Option::is_none")]
    pub meta_data: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "PaymentId", skip_serializing_if = "Option::is_none")]
    pub payment_id: Option<i32>,
    #[serde(rename = "TransactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    #[serde(rename = "SecondaryTransactionId", skip_serializing_if = "Option::is_none")]
    pub secondary_transaction_id: Option<String>,
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "Company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,
    #[serde(rename = "OrganizationNumber", skip_serializing_if = "Option::is_none")]
    pub organization_number: Option<String>,
    #[serde(rename = "FirstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "LastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "Address1", skip_serializing_if = "Option::is_none")]
    pub address1: Option<String>,
    #[serde(rename = "Address2", skip_serializing_if = "Option::is_none")]
    pub address2: Option<String>,
    #[serde(rename = "Zip", skip_serializing_if = "Option::is_none")]
    pub zip: Option<String>,
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "Region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "Phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    #[serde(rename = "MobilePhone", skip_serializing_if = "Option::is_none")]
    pub mobile_phone: Option<String>,
    #[serde(rename = "CareOf", skip_serializing_if = "Option::is_none")]
    pub care_of: Option<String>,
    #[serde(rename = "ShippingId", skip_serializing_if = "Option::is_none")]
    pub shipping_id: Option<i32>,
    #[serde(rename = "ShippingCountry", skip_serializing_if = "Option::is_none")]
    pub shipping_country: Option<String>,
    #[serde(rename = "ShippingCompany", skip_serializing_if = "Option::is_none")]
    pub shipping_company: Option<String>,
    #[serde(rename = "ShippingOrganizationNumber", skip_serializing_if = "Option::is_none")]
    pub shipping_organization_number: Option<String>,
    #[serde(rename = "ShippingFirstName", skip_serializing_if = "Option::is_none")]
    pub shipping_first_name: Option<String>,
    #[serde(rename = "ShippingLastName", skip_serializing_if = "Option::is_none")]
    pub shipping_last_name: Option<String>,
    #[serde(rename = "ShippingEmail", skip_serializing_if = "Option::is_none")]
    pub shipping_email: Option<String>,
    #[serde(rename = "ShippingAddress1", skip_serializing_if = "Option::is_none")]
    pub shipping_address1: Option<String>,
    #[serde(rename = "ShippingAddress2", skip_serializing_if = "Option::is_none")]
    pub shipping_address2: Option<String>,
    #[serde(rename = "ShippingZip", skip_serializing_if = "Option::is_none")]
    pub shipping_zip: Option<String>,
    #[serde(rename = "ShippingCity", skip_serializing_if = "Option::is_none")]
    pub shipping_city: Option<String>,
    #[serde(rename = "ShippingRegion", skip_serializing_if = "Option::is_none")]
    pub shipping_region: Option<String>,
    #[serde(rename = "ShippingPhone", skip_serializing_if = "Option::is_none")]
    pub shipping_phone: Option<String>,
    #[serde(rename = "ShippingMobilePhone", skip_serializing_if = "Option::is_none")]
    pub shipping_mobile_phone: Option<String>,
    #[serde(rename = "ShippingCareOf", skip_serializing_if = "Option::is_none")]
    pub shipping_care_of: Option<String>,
    #[serde(rename = "PickupPoint", skip_serializing_if = "Option::is_none")]
    pub pickup_point: Option<String>,
    #[serde(rename = "DesiredDeliveryDate", skip_serializing_if = "Option::is_none")]
    pub desired_delivery_date: Option<String>,
    #[serde(rename = "FreightClass", skip_serializing_if = "Option::is_none")]
    pub freight_class: Option<Box<crate::models::OrderPeriodFreightClass>>,
    #[serde(rename = "Sum", skip_serializing_if = "Option::is_none")]
    pub sum: Option<f64>,
    #[serde(rename = "ExpectedSum", skip_serializing_if = "Option::is_none")]
    pub expected_sum: Option<f64>,
    #[serde(rename = "OrderValueIncVat", skip_serializing_if = "Option::is_none")]
    pub order_value_inc_vat: Option<f64>,
    #[serde(rename = "OrderValueExVat", skip_serializing_if = "Option::is_none")]
    pub order_value_ex_vat: Option<f64>,
    #[serde(rename = "ItemValueIncVat", skip_serializing_if = "Option::is_none")]
    pub item_value_inc_vat: Option<f64>,
    #[serde(rename = "ItemValueExVat", skip_serializing_if = "Option::is_none")]
    pub item_value_ex_vat: Option<f64>,
    #[serde(rename = "DiscountIncVat", skip_serializing_if = "Option::is_none")]
    pub discount_inc_vat: Option<f64>,
    #[serde(rename = "DiscountExVat", skip_serializing_if = "Option::is_none")]
    pub discount_ex_vat: Option<f64>,
    #[serde(rename = "PercentDiscount", skip_serializing_if = "Option::is_none")]
    pub percent_discount: Option<i32>,
    #[serde(rename = "Balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<f64>,
    #[serde(rename = "ShippingFeeIncVat", skip_serializing_if = "Option::is_none")]
    pub shipping_fee_inc_vat: Option<f64>,
    #[serde(rename = "ShippingFeeExVat", skip_serializing_if = "Option::is_none")]
    pub shipping_fee_ex_vat: Option<f64>,
    #[serde(rename = "PaymentFeeIncVat", skip_serializing_if = "Option::is_none")]
    pub payment_fee_inc_vat: Option<f64>,
    #[serde(rename = "PaymentFeeExVat", skip_serializing_if = "Option::is_none")]
    pub payment_fee_ex_vat: Option<f64>,
}

impl OrderPeriodCheckoutOrder {
    pub fn new() -> OrderPeriodCheckoutOrder {
        OrderPeriodCheckoutOrder {
            order_id: None,
            external_order_id: None,
            cart_id: None,
            session_id: None,
            site_id: None,
            currency: None,
            status: None,
            ip_address: None,
            message: None,
            internal_message: None,
            locale: None,
            rows: None,
            campaign_id: None,
            campaign_code: None,
            campaign_name: None,
            campaign_ids: None,
            campaign_names: None,
            customer_id: None,
            customer_type_id: None,
            gender: None,
            date_of_birth: None,
            personal_id: None,
            user_agent: None,
            meta_data: None,
            payment_id: None,
            transaction_id: None,
            secondary_transaction_id: None,
            country: None,
            company: None,
            organization_number: None,
            first_name: None,
            last_name: None,
            email: None,
            address1: None,
            address2: None,
            zip: None,
            city: None,
            region: None,
            phone: None,
            mobile_phone: None,
            care_of: None,
            shipping_id: None,
            shipping_country: None,
            shipping_company: None,
            shipping_organization_number: None,
            shipping_first_name: None,
            shipping_last_name: None,
            shipping_email: None,
            shipping_address1: None,
            shipping_address2: None,
            shipping_zip: None,
            shipping_city: None,
            shipping_region: None,
            shipping_phone: None,
            shipping_mobile_phone: None,
            shipping_care_of: None,
            pickup_point: None,
            desired_delivery_date: None,
            freight_class: None,
            sum: None,
            expected_sum: None,
            order_value_inc_vat: None,
            order_value_ex_vat: None,
            item_value_inc_vat: None,
            item_value_ex_vat: None,
            discount_inc_vat: None,
            discount_ex_vat: None,
            percent_discount: None,
            balance: None,
            shipping_fee_inc_vat: None,
            shipping_fee_ex_vat: None,
            payment_fee_inc_vat: None,
            payment_fee_ex_vat: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Variant0
    }
}

